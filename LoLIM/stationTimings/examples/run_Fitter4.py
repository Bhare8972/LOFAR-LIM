#!/usr/bin/env python3

###TODO: order output of stations
### FIX error matrix
### try cross-corelations
### potetnail: output list of all used antenans per source per station. o, for each antenna, give contributing events
### then try recalibrating ALL antennas!

### give relLocs as a matrix, where element is euclid. distance between sources.
## on source locations, give distance from previous, like with delays

## these lines are anachronistic and should be fixed at some point
from LoLIM import utilities
utilities.default_raw_data_loc = "/home/brian/KAP_data_link/lightning_data"
utilities.default_processed_data_loc = "/home/brian/processed_files"

#refractivity = 0.000293*2
#utilities.v_air = utilities.C/(1.0+refractivity)

from LoLIM.IO.raw_tbb_IO import read_cal_file
from LoLIM.stationTimings.timingFitter_4_polt import run_fitter   

timeID = "D20190424T194432.504Z"
output_file = "CalAttempt3_2023"
input_files = ['pulse_finding_recal', 'TotalCal2022_pulses', 'CalAttempt3_2023_pulses', 'CalAttempt3_2023_pulses_even']
referance_station = "CS002"

## POSSIBLE IMPROVMENTS to RESULTS:
## script that takes results, and re-reads pulse data using locaiton and delay values. Writes to a new folder.
## use kalman filter to find new pulses (possibly just iterative mapper)

known_sources = [ 110, 120, 130,  31, 51, 81, 211, 221, 241,
                 12, 22, 62, 72, 92, 102,
                 3, 13, 23, 33, 53, 63, 73, 113, 153, 163, 193, 203,213,
                 ]



# IS RS208 COMPLETELY Pol_FIPED?!?!?


station_delays = {
'CS001' : 2.2271007966837645e-06 , ## diff to guess: 3.942679037626472e-13
'CS003' : 1.4051663880854112e-06 , ## diff to guess: 1.6024624597541827e-13
'CS004' : 4.310506183443326e-07 , ## diff to guess: 2.0808890580911854e-13
'CS005' : -2.1921241397439786e-07 , ## diff to guess: -1.8422663364985915e-14
'CS006' : 4.3384343191422683e-07 , ## diff to guess: -2.287650577668689e-13
'CS011' : -5.851660172516542e-07 , ## diff to guess: -4.4559658491843604e-13
'CS017' : -8.438181571261139e-06 , ## diff to guess: -9.734258602493327e-13
'CS021' : 9.245804145578842e-07 , ## diff to guess: 8.745327788474395e-13
'CS024' : 2.3204846451427045e-06 , ## diff to guess: -3.9329802181540434e-13
'CS013' : -1.8138500579609389e-06 , ## diff to guess: 3.2971833669584775e-13
'CS026' : -9.234148214087301e-06 , ## diff to guess: -1.6953106805753584e-12
'CS028' : -9.981607818397865e-06 , ## diff to guess: -9.814561510235794e-13
'CS030' : -2.7423971502347694e-06 , ## diff to guess: 9.538219670877533e-13
'CS031' : 6.078479504667633e-07 , ## diff to guess: 1.35355202644412e-12
'CS032' : -1.574271514774271e-06 , ## diff to guess: 1.4988469879827795e-12
'CS101' : -8.170421103295991e-06 , ## diff to guess: -1.674814448368242e-12
'CS103' : -2.8517891602197998e-05 , ## diff to guess: -3.4365904693907205e-12
'CS301' : -7.189089793915692e-07 , ## diff to guess: 5.899573909831394e-13
'CS302' : -5.352870889271148e-06 , ## diff to guess: 3.224209946269918e-12
'CS401' : -9.51027432355908e-07 , ## diff to guess: 1.9159159763055918e-12
'CS501' : -9.609700202120192e-06 , ## diff to guess: 2.695627111147991e-13
'RS305' : 6.862304134252662e-06 , ## diff to guess: 1.702089631619528e-11
'RS306' : 6.9814634588006445e-06 , ## diff to guess: 2.4956630099657858e-11
'RS406' : 6.913252343179931e-06 , ## diff to guess: 1.9876873705693512e-11
'RS503' : 6.914395316475752e-06 , ## diff to guess: 2.0588199470050273e-12
'RS508' : 6.901831687951659e-06 , ## diff to guess: 2.5126444639657873e-13
'RS106' : 7.017678937316103e-06 , ## diff to guess: -1.1683548288796163e-11
'RS205' : 6.983384994573945e-06 , ## diff to guess: -6.530573116650526e-14
'RS407' : 6.926790164424524e-06 , ## diff to guess: 1.5372057419797637e-11
'RS310' : 6.883094637620698e-06 , ## diff to guess: 4.3083081801047944e-10
'RS409' : 6.8414854871512784e-06 , ## diff to guess: 1.9876270425619774e-10
'RS509' : 6.838761802510262e-06 , ## diff to guess: 4.388406370910635e-11
'RS208' : 6.928921099861576e-06 , ## diff to guess: 3.025086367705853e-10

 }


### locations of fitted sources
guess_source_locations = {

110 :[ -32729.771970516274 , -6228.89153421201 , 6194.802099881312 , 1.2018156692143265 ],
120 :[ -32512.189506529125 , -5922.789993590035 , 6159.626296619274 , 1.2027403712727152 ],
130 :[ -32667.602310048565 , -6272.967883508471 , 6190.518796517419 , 1.2115346543118983 ],
31 :[ -32945.91653330365 , -7675.229775693309 , 6210.102358373884 , 1.2908500660598459 ],
51 :[ -32946.46029218423 , -7675.802328889406 , 6211.24560779596 , 1.2947282532688804 ],
81 :[ -36008.63259914032 , -1822.5288056690797 , 5829.807921132375 , 1.4244868016718184 ],
211 :[ -35869.4744227525 , -1822.3360459044923 , 5721.098651931428 , 1.4222893822066036 ],
221 :[ -23841.751257479013 , -9371.968039390738 , 4831.821204154614 , 1.300315257103698 ],
241 :[ -35913.1851332486 , -1774.928620689979 , 5733.021805778935 , 1.4229377000084211 ],
12 :[ -38309.40873913614 , -4064.9719294909505 , 9306.53066082171 , 2.1781052102092335 ],
22 :[ -38311.945228512224 , -4063.6759467220627 , 9310.831513495725 , 2.1781057357300355 ],
62 :[ -38311.59861557428 , -3827.9805851700326 , 8970.449714843991 , 2.186423791902622 ],
72 :[ -37326.28053943299 , -877.3759686946312 , 8800.542157328355 , 1.6994493878281973 ],
92 :[ -41354.82574195114 , -995.502181753197 , 8134.238901202976 , 2.2706692016425523 ],
102 :[ -37622.295270933435 , -697.6949384247267 , 9094.408825760596 , 1.6870874354558378 ],
3 :[ -38308.277351921926 , -4146.286851922994 , 9298.210391614173 , 2.1775633756416446 ],
13 :[ -32090.402523695462 , -5944.513534432807 , 4234.523302302768 , 2.085177390634587 ],
23 :[ -32221.34330854956 , -5091.589734306818 , 4878.584327230763 , 2.0832121836558364 ],
33 :[ -28903.85851588052 , -9223.6809886512 , 3087.83875863499 , 1.5585031977788901 ],
53 :[ -29142.11325765898 , -10129.979194287847 , 2721.935983598783 , 1.5539914402029216 ],
63 :[ -24115.25340121744 , -9787.864947937662 , 4207.605797156855 , 1.306926541422998 ],
73 :[ -28409.35273233916 , -10227.993668716297 , 2587.1432257959655 , 1.546743208248645 ],
113 :[ -28762.330578321395 , -9358.033769432395 , 2770.2617530225907 , 1.5537446522682359 ],
153 :[ -29580.060335607403 , -10034.066605363003 , 3497.7942728687985 , 1.5727196606371685 ],
163 :[ -27633.793723387964 , -9832.740124378952 , 3052.9540380251406 , 1.542872832791997 ],
193 :[ -37697.61597197188 , -4682.544616957692 , 9307.862326570601 , 2.175953652370614 ],
203 :[ -32232.56814030857 , -6194.040214918538 , 4220.633640053646 , 2.089195319748681 ],
213 :[ -33533.16670800216 , -5476.521936083426 , 4164.32425166634 , 1.0519065934129015 ],


}



antennas_to_recallibrate = {

'005007063' :  1.258824682300295e-09 , # CS005
'005010085' :  1.1681615605122758e-09 , # CS005
'021006049' :  1.4357113286466216e-09 , # CS021
'021010085' :  1.3423558616277364e-09 , # CS021
'101006049' :  -1.559581193551637e-09 , # CS101
'101007063' :  -7.207080037871933e-10 , # CS101
'142007063' :  1.0706599908186388e-09 , # CS302
'142011091' :  1.646063054306938e-09 , # CS302
'181006055' :  2.504011151684974e-10 , # CS501
'145009073' :  -1.0192660187294202e-09 , # RS305
'145011090' :  -1.1018543797756599e-09 , # RS305
'145011091' :  2.635192625276945e-10 , # RS305
'146006049' :  -2.990628694912534e-10 , # RS306
'146006055' :  2.4632170679294653e-10 , # RS306
'146007063' :  5.731233753268109e-10 , # RS306
'166011090' :  7.682792007293839e-10 , # RS406
'188006049' :  8.779779606840493e-10 , # RS508
'106006049' :  1.2099338598811253e-09 , # RS106
'106007062' :  -7.073501611026124e-10 , # RS106
'106009073' :  9.229959843471271e-10 , # RS106
'106011090' :  4.969459809250667e-10 , # RS106
'106011091' :  4.69608030543896e-10 , # RS106
'125011091' :  6.08530396458012e-10 , # RS205
'167007063' :  1.4034621020160053e-09 , # RS407
'169007063' :  1.118685910791158e-09 , # RS409
'169011090' :  -1.1498038205869454e-09 , # RS409
'189006048' :  -1.4701488024997313e-09 , # RS509
'189006054' :  5.746621846105008e-10 , # RS509
'189007062' :  -1.1599265165966604e-09 , # RS509
'189009072' :  -1.3807896354266956e-09 , # RS509
'189010084' :  -1.5590355785773974e-09 , # RS509
'189010085' :  -1.0158920653327848e-09 , # RS509
'189011090' :  2.1273838525461278e-10 , # RS509
'128006049' :  2.0416928786088173e-09 , # RS208
'128006055' :  1.5551968633079425e-09 , # RS208
'128007063' :  1.615829012988974e-09 , # RS208
'128009072' :  -4.162274746226132e-10 , # RS208
'128009073' :  5.036709556462473e-10 , # RS208
'128010084' :  9.530102800456149e-10 , # RS208
'128010085' :  2.172590319455033e-09 , # RS208
'128011091' :  8.205776841531525e-10 , # RS208
'002006055' :  1.2773540477852653e-09 , # CS002


}


## these are stations to exclude
#'CS003', 'CS004', 'CS005', 'CS006', 'CS011' ,
# 'CS001', 'CS017' , 'CS021', 'CS024', 'CS013', 'CS026', 'CS028', 'CS030', 'CS031', 'CS032','CS101', 'CS103', 'CS301', 'CS302','CS401', 'CS501',
# 'RS305', 'RS306', 'RS406', 'RS503', 'RS508', 'RS106', 'RS205', 'RS407', 'RS310',  'RS409', 'RS509', 'RS208'
stations_to_exclude = {


110: [ 'RS106' ],                    ## perfection incarnate
120: [ 'RS409'],                   ## Wrong pulse
130: [ 'RS409', 'RS509'],   # no idea

31 : [  'RS310', 'RS409', ## these two are wrong pulse!
          'RS208'],  ## weak on RS208. Shape-all-good.  Low-medium badness
51:[          ],            
81:[ 'RS205'],
211:['RS409','RS509'],          ## wrong pulses
221:['RS509'  ,  'RS208', 'RS106','RS407' ],                  ##  global-shape is not great, Medium badness. Maybe remove entirely.  REALLY looks like a pol-flip... confusing@!!!
241:['RS409','RS208'   ],                   ##  wrong pulse  and complex pulse, respectibly


12:[ 'RS208'],                         ##   global shape is wierd.    medium badnes
    ## not clear why RS208 no good here. Does look like a pol flip, but not convincing

22:[ ], 
62:[ 'RS409', 'RS208'],                         ## high badness. very complex shape. May not be good. But good proof of pol-flip
72:['RS509'],   ## also complex peak. Definitly not good for RS208
92:['RS310'  ],  ## definetly very complex
102:['RS208'], ## RS 208 is wierd. Don't know why


3:[ ],
13:[],
23:['RS208'],
33:['RS509'],
53:['RS509','RS306','RS208'],
63:['RS208'],
73:[],
113:[],
153:['RS208'],
163:['RS409'], 
193:['RS406','RS508'],
203:[],
213:[],

}


### polarization of fitted sources
# 0 is even, 1 is odd, 2 is both with different t, 3 is both with different xyzt

known_polarizations = {



110  : 1 , 
120  : 1 ,   ## may be ok
130  : 0 ,   ## may be ok

31 : 0,
51:0,
81:0,
211:0,
221:0,
241:0,

12:1,
22:1,
62:1,
72:1,
92:1,
102:1,

3:0,
13:0,
23:0,
33:0,
53:0,
63:0,
73:0,
113:0,
153:0,
163:0,
193:0,
203:0,
213:0,
}

antennas_to_exclude = {
0: [ '189007062' ],
10: [ '150009072' ],
40: [ '032006049',# recalibrate?
     '150010085','150007063'], 
60: [ ],
70: [ '003011090','103006048','026010084', '024006048', '106006048', '125011090' ],
80: [ ],
90: [ ],
110: [ ],
120: [ '003010085', '006010085', '032006055', '101009073', '103006055', '181011091', '142011091', '142006055',
      '106006055', '125010085', '145006055', '146006055', '146006049', '150011091', '150010085', '150009073',
      '150007063', '150006049', '128010084','128010085', '128009072','128009073', '128006048','128006049'],
130: [ '169010084','169010085',  '169009072','169009073', '169007062', '169007063'],
140: [ '106011090', '106009072', '106007062' ],
150: [ ],

1 : [ '128011090','128011091',  '128010084','128010085', '128006054','128006055'],
11:[],
31:[],
51:[],
81:[],
211:['150011090', '150011091', '150010084', '150010085', '150009072', '150009073', '150007062', '150007063', '150006054', '150006055'],
221:['181010084', '189007062', '189006048'],
231:['150010084','150009072','150007062'],
241:[],
251:['142010084', '142006054', '145010084','145007062', '146010084', '146009072', '146007062', '146006054', '146006048', '167006048', '167011090'],


12:[],
22:[],
62:['150010085'],
72:[],
92:['169006048','169006049', '169006054','169006055','169007062','169007063','169009072', '169010084', '169010085', '169011090', '106006049'],
102:['169009073','169006049'],

3:['150011091', '150010084', '150010085','150009072', '150009073','150007062','150007063', '150006054', '150006055','150006048','150006049'],
13:[],
23:['169009072','169009073'],
33:['146006048', '146009072', '146010084'],
53:[],
63:['146009072'],
73:[],
113:[],
153:['146011090','146010084'],
163:['146010084', '146009072', '146007062', '146006054', '146006048', '128006048'],
193:[],
203:[],
213:['150010084','150009072','150007062'],
}


 

bad_antennas = [
'001009072',
'001009073',
'003006054',
'003006055',
'006009072',
'006009073',
'032006049',
'142006048',
'142006049',
'125007062',
'125007063',
'130009072',
'130009073',
'188006054',
]


new_pol_flips = [  
## all antennas that start with 128   (RS208)
# '128006048', '128006054', '128007062', '128009072', '128010084', '128011090',
 ]



input_totalCal = '/TotalCal_6Jan2023.txt'
if __name__== "__main__":
    # input_totalCal = '/TotalCal2022/totalCalOut.txt'
    

    processed_data_folder = utilities.processed_data_dir( timeID )
    totalCal = read_cal_file( processed_data_folder + input_totalCal, pol_flips_are_bad=False )


    if station_delays is None:
        station_delays = totalCal.station_delays


    fitter = run_fitter(timeID = timeID, 
                        output_folder = output_file, 
                        pulse_input_folders = input_files, 
                        guess_timings = station_delays,
                        sources_to_fit = known_sources, ## NOTE: that the index here is file_index + source_index*10 
                        guess_source_locations = guess_source_locations,
                   source_polarizations = known_polarizations, ## NOTE: 0 is even, 1 is odd, 2 is both
                   source_stations_to_exclude = stations_to_exclude, 
                   source_antennas_to_exclude = antennas_to_exclude, 
                   bad_ants = bad_antennas,
                   antennas_to_recalibrate = antennas_to_recallibrate,
                   min_ant_amplitude = 10,
                   ref_station = referance_station,
                   input_antenna_delays = totalCal.ant_delays,
                   new_pol_flips = new_pol_flips
                        )
    
    fitter.setup()

    fitter.fit( 4, 4, max_s_itters=15, randomness = 10.0E-9, ant_randomness = 0.5e-9,
        min_num_iters=5, max_num_iters=1000, xtol=1e-16, ftol=1e-16, gtol=1e-16)

    print()
    print()
    fitter.print_antenna_RMS()
    print()
    print()
    fitter.print_cov_diag()
    print()
    print()
    # fitter.print_antenna_info( '125011090' )

    fitter.output_totalcal( previous_PolFlips=totalCal.polarization_flips,  previous_SignFlips=totalCal.sign_flips )
    
    
    
    
    
    
    
    
    