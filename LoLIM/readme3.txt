a copy and paste from an email:

1) you should have a zipped file "data.tar.gz" in the LIM_scripts directory, this should be unpacked, as it contains useful metadata.


2) You may have noticed that LoLIM expects a particular directory structure. The data files put in a directory like so:    SomeFile/[year]/[TimeID],  and the outputs are placed in SomeFileOutputs/[year]/[TimeID].  The file names are set by these three lines at the top of any script that you run:

from LoLIM import utilities
utilities.default_raw_data_loc = "/exp_app2/appexp1/public/raw_data"
utilities.default_processed_data_loc = "/home/brian/processed_files"

where you will have your data folder name in place of "/exp_app2/appexp1/public/raw_data" and outputs in place of "/home/brian/processed_files".  This is really a bad hack to fix a design mistake I made early on, but it seems to work for now, so I am not inclined to produce a better fix. This has been a relatively recent change, so not all the example scripts have these three lines yet. 

Most of the scripts will then make their own output directory within the SomeFileOutputs/[year]/[TimeID] folder. 


3) another minor code problem. Recently I changed the name of something in utilities.py (the previous definitions made no sense in the long run). If you ever get an error about not being able to import 'log' from utilities, then find a line at the top of the offending file that looks like   "from utilities import log", and change to "from utilities import logger'.  If there is still a problem, then add a line afterwords: " log = logger()".

Someday I'll iron all these bugs out. But I'm sure I'll make new ones by then.


4) If you haven't done so, I suggest you read the comments at the top of IO/raw_tbb_IO.py  (which is technically just 'I', there is no 'O' here), you may also want to read the comments of the class "MultiFile_Dal1", so you get an idea of what's available. Don't bother trying to understand the code itself, it's just a bunch of fiddly bits. May be interesting in the future on a slow day, but probably isn't important for you right now.


5)  **REDACTED**


6) some important methods of raw_tbb_IO.py:
get_antenna_names()
get_LOFAR_centered_positions()
get_timing_callibration_delays()

Each of these returns data in the same order. Since LOFAR has dual-polarized antennas, each "antenna" has two sets of data. I refer to each polarization as "even" and "odd". This is because the "even" polarization antennas all have even indices, and the corresponding odd polarization is the next in the list.  IE    get_LOFAR_centered_positions()[ 2*i ] will always be the same as get_LOFAR_centered_positions()[ 2*i + 1 ]. 

Because of this behavior, if there is ever a problem in the raw data that the even polarization of an antenna is saved, but not the odd polarization, then that data is automatically not used.  This can be overridden by setting  'only_complete_pairs' to False when constructing a MultiFile_DAL1 object, but then things get complicated, so don't do that until you are used to everything else.

get_timing_callibration_delays() returns the calibration delay for each antenna. With two exceptions that you should never encounter, I always take the sign convention that my timing callibrations are delays. That is,  if   get_timing_callibration_delays()[0] is 1, then that means the signal was delayed by one second for the zeroth antenna.  This only callibrates the time WITHIN a station. More on this later.

We have recently learned that, in general, the even and odd antennas are NOT calibrated relative to each other. IE, there is an unknown timing offset between the even and odd antennas. We are working to develop a method to find this timing offset, as we'd like to investigate polarization.  This timing offset for core stations seems to be 0, but it isn't clear why the core is special here.


7) There are three additional files to fix problems with the data:  polarization_flips.txt, bad_antennas.txt, and ant_delays.txt.   These are generated by inspecting the data by eye. 

Sometimes a cable is flipped somewhere in LOFAR, causing the even antenna to be read as odd, and odd to be read as even. At the moment these are found by visual inspection. I am hoping to develop an algorithm soon to find these polarization flips automatically, but such an algorithm has proven stubbornly illusive. This reason is probably why you see a 6 ns shift, in reality you are looking at the wrong antenna. 

bad_antennas.txt is just a list of bad antennas. This includes antennas that have no data, or just look wrong in a way that can't be fixed. 

ant_delays.txt is a both an anachronism and a future investment, but completely unused at the moment. It is actually ADDITIONAL antenna delays on top of the provided timing calibration. I introduced it because some time ago there were antennas that had 1 sample timing offsets, this problem has been long fixed. However, if the future I will probably use ant_delays.txt to correct for the timing offset between even and odd antennas when we find that that offset is. 


8) If you haven't noticed yet, I refer to events by their timeID. The timeID for the two flashes of interest is D20180813T153001.413Z.  Someday I may create some cute names for important flashes, as using timeID's in conversation is just not useful.


9) A useful code to run is plot_max_over_blocks.py. This just plots the maximum of each block of data. It is useful to know where the lightning is in the data, and how long the flash is. The script itself has not been updated in awhile (it should be in the examples folder for starters), so you may need to monkey with it to get it to work, but it isn't complicated. 


10) As you may have guessed, we have a nice method to find and remove RFI.  The first step is to run run_findRFI.py.  Other then the data and output directories, the settings are already set for D20180813T153001.413Z, so you should just be able to run it and inspect the results (placed in a new folder in your output directory). In short, this algorithm finds RFI by looking at the phase variance.

The window_and_filter class then uses the output of the findRFI to remove the RFI. With default settings, it does a couple things. First, it applies a half-hann window to the raw data, this is a close relative of the Hamming window, but not exactly the same. The half-hann is applied to the first and last 10% of the data. So you always loose the first and last 10%. 

Next, since most of our RFI is below 30 MHz and above 80 MHz, we apply a simple band-pass filter between 30-80. We just use a simple block filter that is convolved with a Gaussian to smooth the edges. We then set the RFI lines between 30-80 MHz to zero, and we set the negative frequency components to zero.  Inverse FFT and return results.

By setting the negative frequency components to zero, this generates a complex part of the signal, leaving the real part unchanged, such that the complex signal is now analytic. The absolute value of the complex waveform is the hilbert envelope.


11) There are two components of the timing in between stations.
First, the method get_nominal_sample_number() of MultiFile_DAL1 in raw_tbb_IO.py returns the number of samples past the second that that station starts recording.  IE, if get_nominal_sample_number() returns 5, then that station started recording 5 samples past the second (each sample is 5 ns btw). This sample number is different for every station, as you can imagine, and so must be treated as part of the station timing delays. In general, I just subtract sample_number*5ns off of the time the data was recorded. This could be the reason for the timing offset between LMA and LOFAR.

The second component is the clock-offsets. We find these by locating multiple lightning sources. I have attached a file, station_delays.txt, that includes the clock offsets for D20180813T153001.413Z.  These are not entirely correct, and we need to improve then, but they are good enough for now.


12) For D20180813T153001.413Z you should ignore stations, CS401, RS305, CS031, RS310, and CS026. These stations have problems.  Station RS210 is so close to the flash that I couldn't line up the timings relative to the other stations.



